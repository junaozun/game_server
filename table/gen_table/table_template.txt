// Code generated by gen-table. DO NOT EDIT.

package table

import (
	"errors"
	"reflect"
	"github.com/junaozun/game_server/pkg/csvloader"
	"github.com/junaozun/game_server/pkg/util"
)

// $1Table 表格
type $1Table struct {
	file    string
	DataMap map[$2]*$1
	Data    []*$1
	md5     string
}

// load 加载
func (table *$1Table) load(filepath string) error {
	tData, err := csvloader.LoadCSVConfig(filepath, reflect.TypeOf($1{}))
	if err != nil {
		return err
	}

	typeData := make([]*$1, len(tData))
	for i, v := range tData {
		typeV, ok := v.(*$1)
		if !ok {
			return errors.New("convert interface{} to struct eror")
		}
		typeData[i] = typeV
	}

	table.Data = typeData
	table.DataMap = make(map[$2]*$1, len(tData))
	for _, v := range table.Data {
		table.DataMap[v.$3] = v
	}

	table.md5,_ = GetFileMD5(filepath)

	return nil
}

// reload 重新表格
// 重新加载不会做减量，只做增量和改变
func (table *$1Table) reload(filepath string) (bool, error) {
    //中间处理不可预料得错误一定要恢复回来
    defer func() {
        if err := recover(); nil != err {
           // util.LOG.Criticalf("$1Table.reload] %v %s", err, debug.Stack())
        }
    }()

    // 计算MD5
    md5, err := GetFileMD5(filepath)
    if nil != err {
        return false, err
    }

	//检查是否需要reload
	if md5 == table.md5{
        return false, nil
	}

	tData, err := csvloader.LoadCSVConfig(filepath, reflect.TypeOf($1{}))
	if err != nil {
		return false, err
	}

	typeData := make([]*$1, len(tData))
	for i, v := range tData {
		typeV, ok := v.(*$1)
		if !ok {
			return false, errors.New("convert interface{} to struct eror")
		}
		typeData[i] = typeV
	}

	for _, v := range typeData {
		//已有的要修改值，新增得直接增加
		if data, ok := table.DataMap[v.$3]; ok {
			util.DeepCopy(data, v)
		} else {
			table.DataMap[v.$3] = v
			table.Data = append(table.Data, v)
		}
	}

    table.md5 = md5

	return true, nil
}

//GetFileName 获取table的文件名
func (table *$1Table) GetFileName() string {
	return table.file
}

// GetBy$3 根据$3查找
func (table *$1Table) GetBy$3(val $2) *$1 {
	v := table.DataMap[val]
	return v
}

// GetCloneBy$3 根据$3查找克隆体(性能很差，慎用)
func (table *$1Table) GetCloneBy$3(val $2) *$1 {
	v := table.DataMap[val]
	out := &$1{}
	util.DeepCopy(out, v)
	return out
}

// Count 总个数
func (table *$1Table) Count() int {
	return len(table.DataMap)
}

// $1TableCall 回调
type $1TableCall func(*$1) bool

// Foreach 总个数
func (table *$1Table) Foreach(call $1TableCall) {
	for _, v := range table.Data {
		if call(v) {
			break
		}
	}
}

// MD5 输出表的MD5
func (table *$1Table) MD5() string {
	return table.md5
}
