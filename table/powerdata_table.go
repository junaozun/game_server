// Code generated by gen-table. DO NOT EDIT.

package table

import (
	"errors"
	"reflect"

	"github.com/junaozun/game_server/pkg/utils"
	csvloader "github.com/junaozun/gogopkg/csvloader"
)

// PowerDataTable 表格
type PowerDataTable struct {
	file    string
	DataMap map[int64]*PowerData
	Data    []*PowerData
	md5     string
}

// load 加载
func (table *PowerDataTable) load(filepath string) error {
	tData, err := csvloader.LoadCSVConfig(filepath, reflect.TypeOf(PowerData{}))
	if err != nil {
		return err
	}

	typeData := make([]*PowerData, len(tData))
	for i, v := range tData {
		typeV, ok := v.(*PowerData)
		if !ok {
			return errors.New("convert interface{} to struct eror")
		}
		typeData[i] = typeV
	}

	table.Data = typeData
	table.DataMap = make(map[int64]*PowerData, len(tData))
	for _, v := range table.Data {
		table.DataMap[v.ID] = v
	}

	table.md5, _ = GetFileMD5(filepath)

	return nil
}

// reload 重新表格
// 重新加载不会做减量，只做增量和改变
func (table *PowerDataTable) reload(filepath string) (bool, error) {
	//中间处理不可预料得错误一定要恢复回来
	defer func() {
		if err := recover(); nil != err {
			// util.LOG.Criticalf("PowerDataTable.reload] %v %s", err, debug.Stack())
		}
	}()

	// 计算MD5
	md5, err := GetFileMD5(filepath)
	if nil != err {
		return false, err
	}

	//检查是否需要reload
	if md5 == table.md5 {
		return false, nil
	}

	tData, err := csvloader.LoadCSVConfig(filepath, reflect.TypeOf(PowerData{}))
	if err != nil {
		return false, err
	}

	typeData := make([]*PowerData, len(tData))
	for i, v := range tData {
		typeV, ok := v.(*PowerData)
		if !ok {
			return false, errors.New("convert interface{} to struct eror")
		}
		typeData[i] = typeV
	}

	for _, v := range typeData {
		//已有的要修改值，新增得直接增加
		if data, ok := table.DataMap[v.ID]; ok {
			utils.DeepCopy(data, v)
		} else {
			table.DataMap[v.ID] = v
			table.Data = append(table.Data, v)
		}
	}

	table.md5 = md5

	return true, nil
}

//GetFileName 获取table的文件名
func (table *PowerDataTable) GetFileName() string {
	return table.file
}

// GetByID 根据ID查找
func (table *PowerDataTable) GetByID(val int64) *PowerData {
	v := table.DataMap[val]
	return v
}

// GetCloneByID 根据ID查找克隆体(性能很差，慎用)
func (table *PowerDataTable) GetCloneByID(val int64) *PowerData {
	v := table.DataMap[val]
	out := &PowerData{}
	utils.DeepCopy(out, v)
	return out
}

// Count 总个数
func (table *PowerDataTable) Count() int {
	return len(table.DataMap)
}

// PowerDataTableCall 回调
type PowerDataTableCall func(*PowerData) bool

// Foreach 总个数
func (table *PowerDataTable) Foreach(call PowerDataTableCall) {
	for _, v := range table.Data {
		if call(v) {
			break
		}
	}
}

// MD5 输出表的MD5
func (table *PowerDataTable) MD5() string {
	return table.md5
}
